{
  "contractName": "Humanity",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INITIAL_SUPPLY",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FINAL_SUPPLY",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC20 token that can be used to vote on applications to the Humanity registry.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Humanity\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/mykel/Developer/marble/humanity/contracts/Humanity.sol\":\"Humanity\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/mykel/Developer/marble/humanity/contracts/Humanity.sol\":{\"keccak256\":\"0x8aef30b9f67126dcf229e1fb58f44d9cf00cd5306040ea77018d3a98ddab55ba\",\"urls\":[\"bzzr://b5998470820185c1e5ef964c21ee1919baccc83e1426b2559fa7b9b2c90d081c\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4d2395bda94bb5bb6c524ecda59f07fd6a6d754277e9982143c3858e35145189\",\"urls\":[\"bzzr://5d8b1a44381d54d7c5db45eeb163e74a1c8f61152780eb0769442fbd19aeb52b\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xd55e3d85f62c85440462699afc6dce60fa0a889ca9c52ff0139a0ab0373c1ffa\",\"urls\":[\"bzzr://c6c51d89257be787cf65f50a7268b1f3f0ac7876c9278f3cacee23e814eb05c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "0x60c0604052600560808190527f312e302e3000000000000000000000000000000000000000000000000000000060a0908152620000409160039190620001f9565b503480156200004e57600080fd5b50604051602080620012f48339810180604052620000709190810190620002b3565b60048054600160a060020a031916600160a060020a038316179055620000ab336a14adf4b7320334b9000000640100000000620000b2810204565b50620003d8565b600160a060020a038216620000fe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000389565b60405180910390fd5b6002546200011b9082640100000000620007ed620001ae82021704565b600255600160a060020a038216600090815260208190526040902054620001519082640100000000620007ed620001ae82021704565b600160a060020a0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90620001a2908590620003ad565b60405180910390a35050565b600082820183811015620001f0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f5906200039b565b90505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200023c57805160ff19168380011785556200026c565b828001600101855582156200026c579182015b828111156200026c5782518255916020019190600101906200024f565b506200027a9291506200027e565b5090565b6200029b91905b808211156200027a576000815560010162000285565b90565b6000620002ac8251620003c6565b9392505050565b600060208284031215620002c657600080fd5b6000620002d484846200029e565b949350505050565b6000620002eb602983620003bd565b7f45524332303a3a5f6d696e743a2043616e6e6f74206d696e7420746f2061646481527f72657373207a65726f0000000000000000000000000000000000000000000000602082015260400192915050565b60006200034c601f83620003bd565b7f536166654d6174683a3a6164643a20496e7465676572206f766572666c6f7700815260200192915050565b62000383816200029b565b82525050565b60208082528101620001f381620002dc565b60208082528101620001f3816200033d565b60208101620001f3828462000378565b90815260200190565b6000600160a060020a038216620001f3565b610f0c80620003e86000396000f3fe608060405234801561001057600080fd5b506004361061011d576000357c01000000000000000000000000000000000000000000000000000000009004806340c10f19116100b457806395d89b411161008357806395d89b4114610205578063a457c2d71461020d578063a9059cbb14610220578063dd62ed3e146102335761011d565b806340c10f19146101c057806354fd4d50146101d557806370a08231146101dd5780637b103999146101f05761011d565b80632ff2e9dc116100f05780632ff2e9dc14610188578063313ce5671461019057806339509351146101a557806339605da2146101b85761011d565b806306fdde0314610122578063095ea7b31461014057806318160ddd1461016057806323b872dd14610175575b600080fd5b61012a610246565b6040516101379190610da9565b60405180910390f35b61015361014e3660046109a4565b61027f565b6040516101379190610d9b565b61016861031f565b6040516101379190610e4a565b610153610183366004610957565b610325565b6101686103f1565b610198610400565b6040516101379190610e58565b6101536101b33660046109a4565b610405565b6101686104bc565b6101d36101ce3660046109a4565b6104cb565b005b61012a61054b565b6101686101eb3660046108f7565b6105d9565b6101f86105f4565b6040516101379190610d8d565b61012a610603565b61015361021b3660046109a4565b61063c565b61015361022e3660046109a4565b61069b565b61016861024136600461091d565b6106b1565b6040518060400160405280600881526020017f48756d616e69747900000000000000000000000000000000000000000000000081525081565b6000600160a060020a0383166102b35760405160e560020a62461bcd0281526004016102aa90610e0a565b60405180910390fd5b336000818152600160209081526040808320600160a060020a03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061030d908690610e4a565b60405180910390a35060015b92915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610359908363ffffffff6106dc16565b600160a060020a0385166000908152600160209081526040808320338452909152902055610388848484610707565b600160a060020a0384166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916103df9190610e4a565b60405180910390a35060019392505050565b6a14adf4b7320334b900000081565b601281565b6000600160a060020a0383166104305760405160e560020a62461bcd0281526004016102aa90610e3a565b336000908152600160209081526040808320600160a060020a0387168452909152902054610464908363ffffffff6107ed16565b336000818152600160209081526040808320600160a060020a038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259161030d9190610e4a565b6a52b7d2dcc80cd2e400000081565b600454600160a060020a031633146104f85760405160e560020a62461bcd0281526004016102aa90610dca565b6a52b7d2dcc80cd2e400000061051c8261051061031f565b9063ffffffff6107ed16565b111561053d5760405160e560020a62461bcd0281526004016102aa90610e1a565b610547828261081c565b5050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b505050505081565b600160a060020a031660009081526020819052604090205490565b600454600160a060020a031681565b6040518060400160405280600381526020017f48554d000000000000000000000000000000000000000000000000000000000081525081565b6000600160a060020a0383166106675760405160e560020a62461bcd0281526004016102aa90610dba565b336000908152600160209081526040808320600160a060020a0387168452909152902054610464908363ffffffff6106dc16565b60006106a8338484610707565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156107015760405160e560020a62461bcd0281526004016102aa90610dda565b50900390565b600160a060020a0382166107305760405160e560020a62461bcd0281526004016102aa90610dea565b600160a060020a038316600090815260208190526040902054610759908263ffffffff6106dc16565b600160a060020a03808516600090815260208190526040808220939093559084168152205461078e908263ffffffff6107ed16565b600160a060020a0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107e0908590610e4a565b60405180910390a3505050565b6000828201838110156108155760405160e560020a62461bcd0281526004016102aa90610e2a565b9392505050565b600160a060020a0382166108455760405160e560020a62461bcd0281526004016102aa90610dfa565b600254610858908263ffffffff6107ed16565b600255600160a060020a038216600090815260208190526040902054610884908263ffffffff6107ed16565b600160a060020a0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108d3908590610e4a565b60405180910390a35050565b60006108158235610e73565b60006108158235610e8f565b60006020828403121561090957600080fd5b600061091584846108df565b949350505050565b6000806040838503121561093057600080fd5b600061093c85856108df565b925050602061094d858286016108df565b9150509250929050565b60008060006060848603121561096c57600080fd5b600061097886866108df565b9350506020610989868287016108df565b925050604061099a868287016108eb565b9150509250925092565b600080604083850312156109b757600080fd5b60006109c385856108df565b925050602061094d858286016108eb565b6109dd81610e73565b82525050565b6109dd81610e7e565b60006109f782610e66565b610a018185610e6a565b9350610a11818560208601610e98565b610a1a81610ec8565b9093019392505050565b6000610a31604483610e6a565b7f45524332303a3a6465637265617365416c6c6f77616e63653a2043616e6e6f7481527f20646563726561736520616c6c6f77616e636520666f7220616464726573732060208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600192915050565b6000610ab6603583610e6a565b7f48756d616e6974793a3a6d696e743a204f6e6c7920746865207265676973747281527f792063616e206d696e74206e657720746f6b656e730000000000000000000000602082015260400192915050565b6000610b15602083610e6a565b7f536166654d6174683a3a7375623a20496e746567657220756e646572666c6f77815260200192915050565b6000610b4e603183610e6a565b7f45524332303a3a5f7472616e736665723a2043616e6e6f74207472616e73666581527f7220746f2061646472657373207a65726f000000000000000000000000000000602082015260400192915050565b6000610bad602983610e6a565b7f45524332303a3a5f6d696e743a2043616e6e6f74206d696e7420746f2061646481527f72657373207a65726f0000000000000000000000000000000000000000000000602082015260400192915050565b6000610c0c602b83610e6a565b7f45524332303a3a617070726f76653a2043616e6e6f7420617070726f7665206181527f646472657373207a65726f000000000000000000000000000000000000000000602082015260400192915050565b6000610c6b602483610e6a565b7f48756d616e6974793a3a6d696e743a20457863656564732066696e616c20737581527f70706c7900000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000610cca601f83610e6a565b7f536166654d6174683a3a6164643a20496e7465676572206f766572666c6f7700815260200192915050565b6000610d03604483610e6a565b7f45524332303a3a696e637265617365416c6c6f77616e63653a2043616e6e6f7481527f20696e63726561736520616c6c6f77616e636520666f7220616464726573732060208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600192915050565b6109dd81610e8f565b6109dd81610e92565b6020810161031982846109d4565b6020810161031982846109e3565b6020808252810161081581846109ec565b6020808252810161031981610a24565b6020808252810161031981610aa9565b6020808252810161031981610b08565b6020808252810161031981610b41565b6020808252810161031981610ba0565b6020808252810161031981610bff565b6020808252810161031981610c5e565b6020808252810161031981610cbd565b6020808252810161031981610cf6565b602081016103198284610d7b565b602081016103198284610d84565b5190565b90815260200190565b600061031982610e83565b151590565b600160a060020a031690565b90565b60ff1690565b60005b83811015610eb3578181015183820152602001610e9b565b83811115610ec2576000848401525b50505050565b601f01601f19169056fea265627a7a72305820cd7d6ce18bb9d83587505f21111c967b9caaefea3abeff0a3f0b060b0267b36e6c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011d576000357c01000000000000000000000000000000000000000000000000000000009004806340c10f19116100b457806395d89b411161008357806395d89b4114610205578063a457c2d71461020d578063a9059cbb14610220578063dd62ed3e146102335761011d565b806340c10f19146101c057806354fd4d50146101d557806370a08231146101dd5780637b103999146101f05761011d565b80632ff2e9dc116100f05780632ff2e9dc14610188578063313ce5671461019057806339509351146101a557806339605da2146101b85761011d565b806306fdde0314610122578063095ea7b31461014057806318160ddd1461016057806323b872dd14610175575b600080fd5b61012a610246565b6040516101379190610da9565b60405180910390f35b61015361014e3660046109a4565b61027f565b6040516101379190610d9b565b61016861031f565b6040516101379190610e4a565b610153610183366004610957565b610325565b6101686103f1565b610198610400565b6040516101379190610e58565b6101536101b33660046109a4565b610405565b6101686104bc565b6101d36101ce3660046109a4565b6104cb565b005b61012a61054b565b6101686101eb3660046108f7565b6105d9565b6101f86105f4565b6040516101379190610d8d565b61012a610603565b61015361021b3660046109a4565b61063c565b61015361022e3660046109a4565b61069b565b61016861024136600461091d565b6106b1565b6040518060400160405280600881526020017f48756d616e69747900000000000000000000000000000000000000000000000081525081565b6000600160a060020a0383166102b35760405160e560020a62461bcd0281526004016102aa90610e0a565b60405180910390fd5b336000818152600160209081526040808320600160a060020a03881680855292529182902085905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061030d908690610e4a565b60405180910390a35060015b92915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610359908363ffffffff6106dc16565b600160a060020a0385166000908152600160209081526040808320338452909152902055610388848484610707565b600160a060020a0384166000818152600160209081526040808320338085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925916103df9190610e4a565b60405180910390a35060019392505050565b6a14adf4b7320334b900000081565b601281565b6000600160a060020a0383166104305760405160e560020a62461bcd0281526004016102aa90610e3a565b336000908152600160209081526040808320600160a060020a0387168452909152902054610464908363ffffffff6107ed16565b336000818152600160209081526040808320600160a060020a038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259161030d9190610e4a565b6a52b7d2dcc80cd2e400000081565b600454600160a060020a031633146104f85760405160e560020a62461bcd0281526004016102aa90610dca565b6a52b7d2dcc80cd2e400000061051c8261051061031f565b9063ffffffff6107ed16565b111561053d5760405160e560020a62461bcd0281526004016102aa90610e1a565b610547828261081c565b5050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b505050505081565b600160a060020a031660009081526020819052604090205490565b600454600160a060020a031681565b6040518060400160405280600381526020017f48554d000000000000000000000000000000000000000000000000000000000081525081565b6000600160a060020a0383166106675760405160e560020a62461bcd0281526004016102aa90610dba565b336000908152600160209081526040808320600160a060020a0387168452909152902054610464908363ffffffff6106dc16565b60006106a8338484610707565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156107015760405160e560020a62461bcd0281526004016102aa90610dda565b50900390565b600160a060020a0382166107305760405160e560020a62461bcd0281526004016102aa90610dea565b600160a060020a038316600090815260208190526040902054610759908263ffffffff6106dc16565b600160a060020a03808516600090815260208190526040808220939093559084168152205461078e908263ffffffff6107ed16565b600160a060020a0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107e0908590610e4a565b60405180910390a3505050565b6000828201838110156108155760405160e560020a62461bcd0281526004016102aa90610e2a565b9392505050565b600160a060020a0382166108455760405160e560020a62461bcd0281526004016102aa90610dfa565b600254610858908263ffffffff6107ed16565b600255600160a060020a038216600090815260208190526040902054610884908263ffffffff6107ed16565b600160a060020a0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108d3908590610e4a565b60405180910390a35050565b60006108158235610e73565b60006108158235610e8f565b60006020828403121561090957600080fd5b600061091584846108df565b949350505050565b6000806040838503121561093057600080fd5b600061093c85856108df565b925050602061094d858286016108df565b9150509250929050565b60008060006060848603121561096c57600080fd5b600061097886866108df565b9350506020610989868287016108df565b925050604061099a868287016108eb565b9150509250925092565b600080604083850312156109b757600080fd5b60006109c385856108df565b925050602061094d858286016108eb565b6109dd81610e73565b82525050565b6109dd81610e7e565b60006109f782610e66565b610a018185610e6a565b9350610a11818560208601610e98565b610a1a81610ec8565b9093019392505050565b6000610a31604483610e6a565b7f45524332303a3a6465637265617365416c6c6f77616e63653a2043616e6e6f7481527f20646563726561736520616c6c6f77616e636520666f7220616464726573732060208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600192915050565b6000610ab6603583610e6a565b7f48756d616e6974793a3a6d696e743a204f6e6c7920746865207265676973747281527f792063616e206d696e74206e657720746f6b656e730000000000000000000000602082015260400192915050565b6000610b15602083610e6a565b7f536166654d6174683a3a7375623a20496e746567657220756e646572666c6f77815260200192915050565b6000610b4e603183610e6a565b7f45524332303a3a5f7472616e736665723a2043616e6e6f74207472616e73666581527f7220746f2061646472657373207a65726f000000000000000000000000000000602082015260400192915050565b6000610bad602983610e6a565b7f45524332303a3a5f6d696e743a2043616e6e6f74206d696e7420746f2061646481527f72657373207a65726f0000000000000000000000000000000000000000000000602082015260400192915050565b6000610c0c602b83610e6a565b7f45524332303a3a617070726f76653a2043616e6e6f7420617070726f7665206181527f646472657373207a65726f000000000000000000000000000000000000000000602082015260400192915050565b6000610c6b602483610e6a565b7f48756d616e6974793a3a6d696e743a20457863656564732066696e616c20737581527f70706c7900000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000610cca601f83610e6a565b7f536166654d6174683a3a6164643a20496e7465676572206f766572666c6f7700815260200192915050565b6000610d03604483610e6a565b7f45524332303a3a696e637265617365416c6c6f77616e63653a2043616e6e6f7481527f20696e63726561736520616c6c6f77616e636520666f7220616464726573732060208201527f7a65726f00000000000000000000000000000000000000000000000000000000604082015260600192915050565b6109dd81610e8f565b6109dd81610e92565b6020810161031982846109d4565b6020810161031982846109e3565b6020808252810161081581846109ec565b6020808252810161031981610a24565b6020808252810161031981610aa9565b6020808252810161031981610b08565b6020808252810161031981610b41565b6020808252810161031981610ba0565b6020808252810161031981610bff565b6020808252810161031981610c5e565b6020808252810161031981610cbd565b6020808252810161031981610cf6565b602081016103198284610d7b565b602081016103198284610d84565b5190565b90815260200190565b600061031982610e83565b151590565b600160a060020a031690565b90565b60ff1690565b60005b83811015610eb3578181015183820152602001610e9b565b83811115610ec2576000848401525b50505050565b601f01601f19169056fea265627a7a72305820cd7d6ce18bb9d83587505f21111c967b9caaefea3abeff0a3f0b060b0267b36e6c6578706572696d656e74616cf50037",
  "sourceMap": "417:31:2:-;253:787;417:31;;253:787;417:31;;;;;;;;;;;;;;:::i;:::-;;624:118;8:9:-1;5:2;;;30:1;27;20:12;5:2;624:118:2;;;;;;;;;;;;;;;;;;;;;;672:8;:20;;-1:-1:-1;;;;;;672:20:2;-1:-1:-1;;;;;672:20:2;;;;;702:33;708:10;493:11;702:5;;;;:33;:::i;:::-;624:118;253:787;;6442:308:20;-1:-1:-1;;;;;6516:21:20;;6508:75;;;;;;;;;;;;;;;;;;;;;;6609:12;;:23;;6626:5;6609:16;;;;;;:23;:::i;:::-;6594:12;:38;-1:-1:-1;;;;;6663:18:20;;:9;:18;;;;;;;;;;;:29;;6686:5;6663:22;;;;;;:29;:::i;:::-;-1:-1:-1;;;;;6642:18:20;;:9;:18;;;;;;;;;;;:50;;;;6707:36;;6642:18;;:9;6707:36;;;;6737:5;;6707:36;;;;;;;;;;6442:308;;:::o;1541:180:19:-;1599:7;1630:5;;;1653:6;;;;1645:50;;;;;;;;;;;;;;1713:1;-1:-1:-1;1541:180:19;;;;;:::o;253:787:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;253:787:2;;;-1:-1:-1;253:787:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;5:122:-1:-;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;353:9;317:64;;;307:74;211:186;-1:-1;;;;211:186;405:465;;565:67;629:2;624:3;565:67;;;665:66;645:87;;766:66;761:2;752:12;;745:88;861:2;852:12;;551:319;-1:-1;;551:319;879:364;;1039:67;1103:2;1098:3;1039:67;;;1139:66;1119:87;;1234:2;1225:12;;1025:218;-1:-1;;1025:218;1251:120;1334:31;1359:5;1334:31;;;1329:3;1322:44;1316:55;;;1378:407;1569:2;1583:47;;;1554:18;;1644:131;1554:18;1644:131;;1792:407;1983:2;1997:47;;;1968:18;;2058:131;1968:18;2058:131;;2206:213;2324:2;2309:18;;2338:71;2313:9;2382:6;2338:71;;2427:163;2530:19;;;2579:4;2570:14;;2523:67;2684:105;;-1:-1;;;;;2865:54;;2753:31;2848:76;;253:787:2;;;;;;",
  "deployedSourceMap": "253:787:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;253:787:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;287:40;;;:::i;:::-;;;;;;;;;;;;;;;;2735:285:20;;;;;;;;;:::i;:::-;;;;;;;;936:89;;;:::i;:::-;;;;;;;;3483:294;;;;;;;;;:::i;455:49:2:-;;;:::i;376:35::-;;;:::i;:::-;;;;;;;;4280:389:20;;;;;;;;;:::i;524:48:2:-;;;:::i;748:289::-;;;;;;;;;:::i;:::-;;417:31;;;:::i;1234:104:20:-;;;;;;;;;:::i;594:23:2:-;;;:::i;:::-;;;;;;;;333:37;;;:::i;5177:399:20:-;;;;;;;;;:::i;1962:137::-;;;;;;;;;:::i;1669:129::-;;;;;;;;;:::i;287:40:2:-;;;;;;;;;;;;;;;;;;;:::o;2735:285:20:-;2800:4;-1:-1:-1;;;;;2824:21:20;;2816:77;;;;-1:-1:-1;;;;;2816:77:20;;;;;;;;;;;;;;;;;2913:10;2904:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;2904:29:20;;;;;;;;;;;:37;;;2956:36;;2904:29;;2913:10;2956:36;;;;2936:5;;2956:36;;;;;;;;;;-1:-1:-1;3009:4:20;2735:285;;;;;:::o;936:89::-;1006:12;;936:89;:::o;3483:294::-;-1:-1:-1;;;;;3607:14:20;;3562:4;3607:14;;;:8;:14;;;;;;;;3622:10;3607:26;;;;;;;;:37;;3638:5;3607:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3578:14:20;;;;;;:8;:14;;;;;;;;3593:10;3578:26;;;;;;;:66;3654:26;3587:4;3670:2;3674:5;3654:9;:26::i;:::-;-1:-1:-1;;;;;3695:54:20;;3722:14;;;;:8;:14;;;;;;;;3710:10;3722:26;;;;;;;;;;3695:54;;3710:10;;3695:54;;;;;3722:26;3695:54;;;;;;;;;;-1:-1:-1;3766:4:20;3483:294;;;;;:::o;455:49:2:-;493:11;455:49;:::o;376:35::-;409:2;376:35;:::o;4280:389:20:-;4360:4;-1:-1:-1;;;;;4384:21:20;;4376:102;;;;-1:-1:-1;;;;;4376:102:20;;;;;;;;;4530:10;4521:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4521:29:20;;;;;;;;;;:45;;4555:10;4521:45;:33;:45;:::i;:::-;4498:10;4489:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4489:29:20;;;;;;;;;;;:77;;;4581:60;;4489:29;;4581:60;;;;4489:77;4581:60;;524:48:2;560:12;524:48;:::o;748:289::-;833:8;;-1:-1:-1;;;;;833:8:2;819:10;:22;811:88;;;;-1:-1:-1;;;;;811:88:2;;;;;;;;;560:12;917:24;935:5;917:13;:11;:13::i;:::-;:17;:24;:17;:24;:::i;:::-;:40;;909:89;;;;-1:-1:-1;;;;;909:89:2;;;;;;;;;1009:21;1015:7;1024:5;1009;:21::i;:::-;748:289;;:::o;417:31::-;;;;;;;;;;;;;;;-1:-1:-1;;417:31:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1234:104:20:-;-1:-1:-1;;;;;1315:16:20;1289:7;1315:16;;;;;;;;;;;;1234:104::o;594:23:2:-;;;-1:-1:-1;;;;;594:23:2;;:::o;333:37::-;;;;;;;;;;;;;;;;;;;:::o;5177:399:20:-;5262:4;-1:-1:-1;;;;;5286:21:20;;5278:102;;;;-1:-1:-1;;;;;5278:102:20;;;;;;;;;5432:10;5423:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5423:29:20;;;;;;;;;;:50;;5457:15;5423:50;:33;:50;:::i;1962:137::-;2023:4;2039:32;2049:10;2061:2;2065:5;2039:9;:32::i;:::-;-1:-1:-1;2088:4:20;1962:137;;;;:::o;1669:129::-;-1:-1:-1;;;;;1767:15:20;;;1741:7;1767:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1669:129::o;1279:181:19:-;1337:7;1369:1;1364;:6;;1356:51;;;;-1:-1:-1;;;;;1356:51:19;;;;;;;;;-1:-1:-1;1429:5:19;;;1279:181::o;5790:309:20:-;-1:-1:-1;;;;;5877:16:20;;5869:78;;;;-1:-1:-1;;;;;5869:78:20;;;;;;;;;-1:-1:-1;;;;;5976:15:20;;:9;:15;;;;;;;;;;;:26;;5996:5;5976:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5958:15:20;;;:9;:15;;;;;;;;;;;:44;;;;6028:13;;;;;;;:24;;6046:5;6028:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;6012:13:20;;;:9;:13;;;;;;;;;;;;:40;;;;6067:25;;;;;;;;;;6086:5;;6067:25;;;;;;;;;;5790:309;;;:::o;1541:180:19:-;1599:7;1630:5;;;1653:6;;;;1645:50;;;;-1:-1:-1;;;;;1645:50:19;;;;;;;;;1713:1;1541:180;-1:-1:-1;;;1541:180:19:o;6442:308:20:-;-1:-1:-1;;;;;6516:21:20;;6508:75;;;;-1:-1:-1;;;;;6508:75:20;;;;;;;;;6609:12;;:23;;6626:5;6609:23;:16;:23;:::i;:::-;6594:12;:38;-1:-1:-1;;;;;6663:18:20;;:9;:18;;;;;;;;;;;:29;;6686:5;6663:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6642:18:20;;:9;:18;;;;;;;;;;;:50;;;;6707:36;;6642:18;;:9;6707:36;;;;6737:5;;6707:36;;;;;;;;;;6442:308;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:118;;197:46;235:6;222:20;197:46;;255:241;;359:2;347:9;338:7;334:23;330:32;327:2;;;375:1;372;365:12;327:2;410:1;427:53;472:7;452:9;427:53;;;417:63;321:175;-1:-1;;;;321:175;503:366;;;624:2;612:9;603:7;599:23;595:32;592:2;;;640:1;637;630:12;592:2;675:1;692:53;737:7;717:9;692:53;;;682:63;;654:97;782:2;800:53;845:7;836:6;825:9;821:22;800:53;;;790:63;;761:98;586:283;;;;;;876:491;;;;1014:2;1002:9;993:7;989:23;985:32;982:2;;;1030:1;1027;1020:12;982:2;1065:1;1082:53;1127:7;1107:9;1082:53;;;1072:63;;1044:97;1172:2;1190:53;1235:7;1226:6;1215:9;1211:22;1190:53;;;1180:63;;1151:98;1280:2;1298:53;1343:7;1334:6;1323:9;1319:22;1298:53;;;1288:63;;1259:98;976:391;;;;;;1374:366;;;1495:2;1483:9;1474:7;1470:23;1466:32;1463:2;;;1511:1;1508;1501:12;1463:2;1546:1;1563:53;1608:7;1588:9;1563:53;;;1553:63;;1525:97;1653:2;1671:53;1716:7;1707:6;1696:9;1692:22;1671:53;;1747:120;1830:31;1855:5;1830:31;;;1825:3;1818:44;1812:55;;;1874:111;1951:28;1973:5;1951:28;;1992:339;;2100:35;2129:5;2100:35;;;2147:71;2211:6;2206:3;2147:71;;;2140:78;;2223:52;2268:6;2263:3;2256:4;2249:5;2245:16;2223:52;;;2296:29;2318:6;2296:29;;;2287:39;;;;2080:251;-1:-1;;;2080:251;2339:566;;2499:67;2563:2;2558:3;2499:67;;;2599:66;2579:87;;2700:66;2695:2;2686:12;;2679:88;2801:66;2796:2;2787:12;;2780:88;2896:2;2887:12;;2485:420;-1:-1;;2485:420;2914:465;;3074:67;3138:2;3133:3;3074:67;;;3174:66;3154:87;;3275:66;3270:2;3261:12;;3254:88;3370:2;3361:12;;3060:319;-1:-1;;3060:319;3388:364;;3548:67;3612:2;3607:3;3548:67;;;3648:66;3628:87;;3743:2;3734:12;;3534:218;-1:-1;;3534:218;3761:465;;3921:67;3985:2;3980:3;3921:67;;;4021:66;4001:87;;4122:66;4117:2;4108:12;;4101:88;4217:2;4208:12;;3907:319;-1:-1;;3907:319;4235:465;;4395:67;4459:2;4454:3;4395:67;;;4495:66;4475:87;;4596:66;4591:2;4582:12;;4575:88;4691:2;4682:12;;4381:319;-1:-1;;4381:319;4709:465;;4869:67;4933:2;4928:3;4869:67;;;4969:66;4949:87;;5070:66;5065:2;5056:12;;5049:88;5165:2;5156:12;;4855:319;-1:-1;;4855:319;5183:465;;5343:67;5407:2;5402:3;5343:67;;;5443:66;5423:87;;5544:66;5539:2;5530:12;;5523:88;5639:2;5630:12;;5329:319;-1:-1;;5329:319;5657:364;;5817:67;5881:2;5876:3;5817:67;;;5917:66;5897:87;;6012:2;6003:12;;5803:218;-1:-1;;5803:218;6030:566;;6190:67;6254:2;6249:3;6190:67;;;6290:66;6270:87;;6391:66;6386:2;6377:12;;6370:88;6492:66;6487:2;6478:12;;6471:88;6587:2;6578:12;;6176:420;-1:-1;;6176:420;6604:120;6687:31;6712:5;6687:31;;6731:114;6810:29;6833:5;6810:29;;6852:213;6970:2;6955:18;;6984:71;6959:9;7028:6;6984:71;;7072:201;7184:2;7169:18;;7198:65;7173:9;7236:6;7198:65;;7280:293;7414:2;7428:47;;;7399:18;;7489:74;7399:18;7549:6;7489:74;;7580:407;7771:2;7785:47;;;7756:18;;7846:131;7756:18;7846:131;;7994:407;8185:2;8199:47;;;8170:18;;8260:131;8170:18;8260:131;;8408:407;8599:2;8613:47;;;8584:18;;8674:131;8584:18;8674:131;;8822:407;9013:2;9027:47;;;8998:18;;9088:131;8998:18;9088:131;;9236:407;9427:2;9441:47;;;9412:18;;9502:131;9412:18;9502:131;;9650:407;9841:2;9855:47;;;9826:18;;9916:131;9826:18;9916:131;;10064:407;10255:2;10269:47;;;10240:18;;10330:131;10240:18;10330:131;;10478:407;10669:2;10683:47;;;10654:18;;10744:131;10654:18;10744:131;;10892:407;11083:2;11097:47;;;11068:18;;11158:131;11068:18;11158:131;;11306:213;11424:2;11409:18;;11438:71;11413:9;11482:6;11438:71;;11526:205;11640:2;11625:18;;11654:67;11629:9;11694:6;11654:67;;11738:88;11809:12;;11793:33;11834:163;11937:19;;;11986:4;11977:14;;11930:67;12005:105;;12074:31;12099:5;12074:31;;12117:92;12190:13;12183:21;;12166:43;12216:128;-1:-1;;;;;12285:54;;12268:76;12351:79;12420:5;12403:27;12437:88;12515:4;12504:16;;12487:38;12866:268;12931:1;12938:101;12952:6;12949:1;12946:13;12938:101;;;13019:11;;;13013:18;13000:11;;;12993:39;12974:2;12967:10;12938:101;;;13054:6;13051:1;13048:13;13045:2;;;13119:1;13110:6;13105:3;13101:16;13094:27;13045:2;12915:219;;;;;13142:97;13230:2;13210:14;-1:-1;;13206:28;;13190:49",
  "source": "pragma solidity 0.5.7;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\n\n\n/**\n * @title Humanity\n * @dev ERC20 token that can be used to vote on applications to the Humanity registry.\n */\ncontract Humanity is ERC20 {\n\n    string public constant name = \"Humanity\";\n    string public constant symbol = \"HUM\";\n    uint8 public constant decimals = 18;\n    string public version = \"1.0.0\";\n\n    uint public constant INITIAL_SUPPLY = 25000000e18; // 25 million\n    uint public constant FINAL_SUPPLY = 100000000e18; // 100 million\n\n    address public registry;\n\n    constructor(address _registry) public {\n        registry = _registry;\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function mint(address account, uint256 value) public {\n        require(msg.sender == registry, \"Humanity::mint: Only the registry can mint new tokens\");\n        require(totalSupply().add(value) <= FINAL_SUPPLY, \"Humanity::mint: Exceeds final supply\");\n\n        _mint(account, value);\n    }\n\n}\n",
  "sourcePath": "/Users/mykel/Developer/marble/humanity/contracts/Humanity.sol",
  "ast": {
    "absolutePath": "/Users/mykel/Developer/marble/humanity/contracts/Humanity.sol",
    "exportedSymbols": {
      "Humanity": [
        966
      ]
    },
    "id": 967,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 892,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:2"
      },
      {
        "id": 893,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "23:33:2"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 895,
        "nodeType": "ImportDirective",
        "scope": 967,
        "sourceUnit": 2400,
        "src": "58:78:2",
        "symbolAliases": [
          {
            "foreign": 894,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 896,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2399,
              "src": "274:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$2399",
                "typeString": "contract ERC20"
              }
            },
            "id": 897,
            "nodeType": "InheritanceSpecifier",
            "src": "274:5:2"
          }
        ],
        "contractDependencies": [
          2399,
          2468
        ],
        "contractKind": "contract",
        "documentation": "@title Humanity\n@dev ERC20 token that can be used to vote on applications to the Humanity registry.",
        "fullyImplemented": true,
        "id": 966,
        "linearizedBaseContracts": [
          966,
          2399,
          2468
        ],
        "name": "Humanity",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 900,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "287:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 898,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "287:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "48756d616e697479",
              "id": 899,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "317:10:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_1ad376896b359e1e7eb87cd55198d3025d39fa9f3267c8317366536d7e4783c3",
                "typeString": "literal_string \"Humanity\""
              },
              "value": "Humanity"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 903,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "333:37:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 901,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "333:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "48554d",
              "id": 902,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "365:5:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_6f14bdd1f29f61acecc69fc655a58e0ec739a246392bfa20c8eae685bb637090",
                "typeString": "literal_string \"HUM\""
              },
              "value": "HUM"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 906,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "376:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 904,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "376:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 905,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "409:2:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 909,
            "name": "version",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "417:31:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 907,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "417:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "312e302e30",
              "id": 908,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "441:7:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
                "typeString": "literal_string \"1.0.0\""
              },
              "value": "1.0.0"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 912,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "455:49:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 910,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "455:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3235303030303030653138",
              "id": 911,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "493:11:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_25000000000000000000000000_by_1",
                "typeString": "int_const 25000000000000000000000000"
              },
              "value": "25000000e18"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 915,
            "name": "FINAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "524:48:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 913,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "524:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "313030303030303030653138",
              "id": 914,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "560:12:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_100000000000000000000000000_by_1",
                "typeString": "int_const 100000000000000000000000000"
              },
              "value": "100000000e18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 917,
            "name": "registry",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "594:23:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 916,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "594:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 932,
              "nodeType": "Block",
              "src": "662:80:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 922,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 917,
                      "src": "672:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 923,
                      "name": "_registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 919,
                      "src": "683:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "672:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 925,
                  "nodeType": "ExpressionStatement",
                  "src": "672:20:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 927,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2483,
                          "src": "708:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 928,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 929,
                        "name": "INITIAL_SUPPLY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 912,
                        "src": "720:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 926,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2313,
                      "src": "702:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "702:33:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 931,
                  "nodeType": "ExpressionStatement",
                  "src": "702:33:2"
                }
              ]
            },
            "documentation": null,
            "id": 933,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 919,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 933,
                  "src": "636:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "636:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "635:19:2"
            },
            "returnParameters": {
              "id": 921,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "662:0:2"
            },
            "scope": 966,
            "src": "624:118:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 964,
              "nodeType": "Block",
              "src": "801:236:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 944,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 941,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2483,
                            "src": "819:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "819:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 943,
                          "name": "registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 917,
                          "src": "833:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "819:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "48756d616e6974793a3a6d696e743a204f6e6c79207468652072656769737472792063616e206d696e74206e657720746f6b656e73",
                        "id": 945,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "843:55:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c65cbbb7314a76a01ef0b1fc9b99f21317c6938ebc6c162ae633f6a8aa0b618",
                          "typeString": "literal_string \"Humanity::mint: Only the registry can mint new tokens\""
                        },
                        "value": "Humanity::mint: Only the registry can mint new tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c65cbbb7314a76a01ef0b1fc9b99f21317c6938ebc6c162ae633f6a8aa0b618",
                          "typeString": "literal_string \"Humanity::mint: Only the registry can mint new tokens\""
                        }
                      ],
                      "id": 940,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2486,
                        2487
                      ],
                      "referencedDeclaration": 2487,
                      "src": "811:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 946,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "811:88:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 947,
                  "nodeType": "ExpressionStatement",
                  "src": "811:88:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 952,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "935:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 949,
                                "name": "totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1990,
                                "src": "917:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 950,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "917:13:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 951,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1939,
                            "src": "917:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 953,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "917:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 954,
                          "name": "FINAL_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 915,
                          "src": "945:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "917:40:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "48756d616e6974793a3a6d696e743a20457863656564732066696e616c20737570706c79",
                        "id": 956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "959:38:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9a9aec0063c338be440180b8f8dbc57f4731afa3e038cb77d9649aebcd67625e",
                          "typeString": "literal_string \"Humanity::mint: Exceeds final supply\""
                        },
                        "value": "Humanity::mint: Exceeds final supply"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9a9aec0063c338be440180b8f8dbc57f4731afa3e038cb77d9649aebcd67625e",
                          "typeString": "literal_string \"Humanity::mint: Exceeds final supply\""
                        }
                      ],
                      "id": 948,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2486,
                        2487
                      ],
                      "referencedDeclaration": 2487,
                      "src": "909:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "909:89:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 958,
                  "nodeType": "ExpressionStatement",
                  "src": "909:89:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 960,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 935,
                        "src": "1015:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 961,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 937,
                        "src": "1024:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 959,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2313,
                      "src": "1009:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1009:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 963,
                  "nodeType": "ExpressionStatement",
                  "src": "1009:21:2"
                }
              ]
            },
            "documentation": null,
            "id": 965,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 938,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 935,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 965,
                  "src": "762:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 934,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "762:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 937,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 965,
                  "src": "779:13:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 936,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "779:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "761:32:2"
            },
            "returnParameters": {
              "id": 939,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "801:0:2"
            },
            "scope": 966,
            "src": "748:289:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 967,
        "src": "253:787:2"
      }
    ],
    "src": "0:1041:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/mykel/Developer/marble/humanity/contracts/Humanity.sol",
    "exportedSymbols": {
      "Humanity": [
        966
      ]
    },
    "id": 967,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 892,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:2"
      },
      {
        "id": 893,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "23:33:2"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 895,
        "nodeType": "ImportDirective",
        "scope": 967,
        "sourceUnit": 2400,
        "src": "58:78:2",
        "symbolAliases": [
          {
            "foreign": 894,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 896,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2399,
              "src": "274:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$2399",
                "typeString": "contract ERC20"
              }
            },
            "id": 897,
            "nodeType": "InheritanceSpecifier",
            "src": "274:5:2"
          }
        ],
        "contractDependencies": [
          2399,
          2468
        ],
        "contractKind": "contract",
        "documentation": "@title Humanity\n@dev ERC20 token that can be used to vote on applications to the Humanity registry.",
        "fullyImplemented": true,
        "id": 966,
        "linearizedBaseContracts": [
          966,
          2399,
          2468
        ],
        "name": "Humanity",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 900,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "287:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 898,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "287:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "48756d616e697479",
              "id": 899,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "317:10:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_1ad376896b359e1e7eb87cd55198d3025d39fa9f3267c8317366536d7e4783c3",
                "typeString": "literal_string \"Humanity\""
              },
              "value": "Humanity"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 903,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "333:37:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 901,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "333:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "48554d",
              "id": 902,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "365:5:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_6f14bdd1f29f61acecc69fc655a58e0ec739a246392bfa20c8eae685bb637090",
                "typeString": "literal_string \"HUM\""
              },
              "value": "HUM"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 906,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "376:35:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 904,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "376:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 905,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "409:2:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 909,
            "name": "version",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "417:31:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 907,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "417:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "312e302e30",
              "id": 908,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "441:7:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
                "typeString": "literal_string \"1.0.0\""
              },
              "value": "1.0.0"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 912,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "455:49:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 910,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "455:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3235303030303030653138",
              "id": 911,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "493:11:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_25000000000000000000000000_by_1",
                "typeString": "int_const 25000000000000000000000000"
              },
              "value": "25000000e18"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 915,
            "name": "FINAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "524:48:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 913,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "524:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "313030303030303030653138",
              "id": 914,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "560:12:2",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_100000000000000000000000000_by_1",
                "typeString": "int_const 100000000000000000000000000"
              },
              "value": "100000000e18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 917,
            "name": "registry",
            "nodeType": "VariableDeclaration",
            "scope": 966,
            "src": "594:23:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 916,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "594:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 932,
              "nodeType": "Block",
              "src": "662:80:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 922,
                      "name": "registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 917,
                      "src": "672:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 923,
                      "name": "_registry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 919,
                      "src": "683:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "672:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 925,
                  "nodeType": "ExpressionStatement",
                  "src": "672:20:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 927,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2483,
                          "src": "708:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 928,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "708:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 929,
                        "name": "INITIAL_SUPPLY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 912,
                        "src": "720:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 926,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2313,
                      "src": "702:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 930,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "702:33:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 931,
                  "nodeType": "ExpressionStatement",
                  "src": "702:33:2"
                }
              ]
            },
            "documentation": null,
            "id": 933,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 920,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 919,
                  "name": "_registry",
                  "nodeType": "VariableDeclaration",
                  "scope": 933,
                  "src": "636:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 918,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "636:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "635:19:2"
            },
            "returnParameters": {
              "id": 921,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "662:0:2"
            },
            "scope": 966,
            "src": "624:118:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 964,
              "nodeType": "Block",
              "src": "801:236:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 944,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 941,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2483,
                            "src": "819:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "819:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 943,
                          "name": "registry",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 917,
                          "src": "833:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "819:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "48756d616e6974793a3a6d696e743a204f6e6c79207468652072656769737472792063616e206d696e74206e657720746f6b656e73",
                        "id": 945,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "843:55:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1c65cbbb7314a76a01ef0b1fc9b99f21317c6938ebc6c162ae633f6a8aa0b618",
                          "typeString": "literal_string \"Humanity::mint: Only the registry can mint new tokens\""
                        },
                        "value": "Humanity::mint: Only the registry can mint new tokens"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_1c65cbbb7314a76a01ef0b1fc9b99f21317c6938ebc6c162ae633f6a8aa0b618",
                          "typeString": "literal_string \"Humanity::mint: Only the registry can mint new tokens\""
                        }
                      ],
                      "id": 940,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2486,
                        2487
                      ],
                      "referencedDeclaration": 2487,
                      "src": "811:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 946,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "811:88:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 947,
                  "nodeType": "ExpressionStatement",
                  "src": "811:88:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 955,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 952,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 937,
                              "src": "935:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 949,
                                "name": "totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1990,
                                "src": "917:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 950,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "917:13:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 951,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1939,
                            "src": "917:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 953,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "917:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 954,
                          "name": "FINAL_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 915,
                          "src": "945:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "917:40:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "48756d616e6974793a3a6d696e743a20457863656564732066696e616c20737570706c79",
                        "id": 956,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "959:38:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9a9aec0063c338be440180b8f8dbc57f4731afa3e038cb77d9649aebcd67625e",
                          "typeString": "literal_string \"Humanity::mint: Exceeds final supply\""
                        },
                        "value": "Humanity::mint: Exceeds final supply"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9a9aec0063c338be440180b8f8dbc57f4731afa3e038cb77d9649aebcd67625e",
                          "typeString": "literal_string \"Humanity::mint: Exceeds final supply\""
                        }
                      ],
                      "id": 948,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        2486,
                        2487
                      ],
                      "referencedDeclaration": 2487,
                      "src": "909:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 957,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "909:89:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 958,
                  "nodeType": "ExpressionStatement",
                  "src": "909:89:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 960,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 935,
                        "src": "1015:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 961,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 937,
                        "src": "1024:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 959,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2313,
                      "src": "1009:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1009:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 963,
                  "nodeType": "ExpressionStatement",
                  "src": "1009:21:2"
                }
              ]
            },
            "documentation": null,
            "id": 965,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 938,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 935,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 965,
                  "src": "762:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 934,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "762:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 937,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 965,
                  "src": "779:13:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 936,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "779:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "761:32:2"
            },
            "returnParameters": {
              "id": 939,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "801:0:2"
            },
            "scope": 966,
            "src": "748:289:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 967,
        "src": "253:787:2"
      }
    ],
    "src": "0:1041:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-05-24T19:50:59.201Z",
  "devdoc": {
    "details": "ERC20 token that can be used to vote on applications to the Humanity registry.",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "Humanity"
  },
  "userdoc": {
    "methods": {}
  }
}